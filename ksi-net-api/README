How to use this software:

First we have to link the KSI .NET API to our software.
To do that, it is necessary to right click on the solution. Select add and then reference.
From the bottom of the popup window, click browse and then search the KSI .NET API library. 
Then we are set up with the library and start coding.

Now to start using KSI technology we have 2 possibilities, we can use the simple API wrapper or we write
it directly. 

// Create HTTP KSI service protocol
var httpKsiServiceProtocol = new HttpKsiServiceProtocol("http://signingservice_url", "http://extendingservice_url", "http://publicationsfile_url");
// Create new KSI service
var ksiService = new KsiService(httpKsiServiceProtocol, httpKsiServiceProtocol, httpKsiServiceProtocol, new ServiceCredentials("anon", "anon"), new PublicationsFileFactory(new PkiTrustStoreProvider()), new KsiSignatureFactory());

// Create new simple wrapper
var ksi = new Ksi(ksiService);



// Create new signature by signing given hash
var ksiSignature = ksi.Sign(new DataHash(Base16.Decode("010000000000000000000000000000000000000000000000000000000000000000")));

// Load some older signature and to extend it to head use following command
ksiSignature = ksi.ExtendToHead(ksiSignature);

// For getting publications file
var publicationsFile = ksi.GetPublicationsFile();


// Signing without simple wrapper
signature = ksiService.Sign(new DataHash(Base16.Decode("010000000000000000000000000000000000000000000000000000000000000000")));

// Getting publications file without simple wrapper
publicationsFile = _ksiService.GetPublicationsFile();

// Extending without simple wrapper
var publicationRecord = publicationsFile.GetLatestPublication();
CalendarHashChain calendarHashChain = _ksiService.Extend(signature.AggregationTime, publicationRecord.PublicationData.PublicationTime);
var extendedSignature = signature.Extend(calendarHashChain, publicationRecord);


