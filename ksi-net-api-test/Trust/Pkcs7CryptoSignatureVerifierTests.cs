/*
 * Copyright 2013-2017 Guardtime, Inc.
 *
 * This file is part of the Guardtime client SDK.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES, CONDITIONS, OR OTHER LICENSES OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 * "Guardtime" and "KSI" are trademarks or registered trademarks of
 * Guardtime, Inc., and no license to trademarks is granted; Guardtime
 * reserves and retains all trademark rights.
 */

using System;
using System.IO;
using Guardtime.KSI.Crypto;
using Guardtime.KSI.Exceptions;
using Guardtime.KSI.Publication;
using Guardtime.KSI.Test.Properties;
using Guardtime.KSI.Utils;
using NUnit.Framework;

namespace Guardtime.KSI.Test.Trust
{
    [TestFixture]
    public class Pkcs7CryptoSignatureVerifierTests
    {
        [Test]
        public void SignedBytesNullTest()
        {
            string encodedCert =
                "308201A730820110A003020102021000BAA25764984826073CEF1BEEAA7B6F300D06092A864886F70D01010B050030123110300E06035504030C0774657374696E67301E170D3136303130313030303030305A170D3236303130313030303030305A30123110300E06035504030C0774657374696E6730819F300D06092A864886F70D010101050003818D0030818902818100E66DC137E4F856EADB0D47C280BED297D70191287919FD6EBF1195DF5E821EA867F861E551A37762E3CAEBB32B1DE7E0143529F1678A87BCE2C8E5D5185F25EEC3ABC7E295EEBC64EFE4BC8ADB412A99D3F9125D30C45F887632DE4B95AA169B79D1A6FD4E735255632341ED41B5BFA828975A4F1501B02C2277CA15BD470DAB0203010001300D06092A864886F70D01010B05000381810057B6B2BED11E7DC06E7A7AD77D1922C33FE8BDEBDC48B20A9444F807AA6017890E10B21C6FA5C4795AF32B9A45E9C560580115C8DF09E4ACA8E69C2757F9CAAB3007B548A567DBE8FB228EFF4F3D7995B3B2F008F3D62BECB3D2E80827A17B42B9C8C8C0280565868D572BBE7E4916E4888D8F503BEC1561CF4A1495C43C6420";

            string encodedSignature =


            ICryptoSignatureVerifier verifier = KsiProvider.CreatePkcs7CryptoSignatureVerifier();
            ArgumentNullException ex = Assert.Throws<ArgumentNullException>(delegate
            {
                verifier.Verify(null, Base16.Decode(encodedSignature), new CryptoSignatureVerificationData(Base16.Decode(encodedCert)));
            });

            Assert.That(ex.ParamName == "signedBytes", "Unexpected exception message: " + ex.Message);
        }

        [Test]
        public void SignatureBytesNullTest()
        {
            string encodedCert =


            ICryptoSignatureVerifier verifier = KsiProvider.CreatePkcs7CryptoSignatureVerifier();
            ArgumentNullException ex = Assert.Throws<ArgumentNullException>(delegate
            {
                verifier.Verify(Base16.Decode("01"), null, new CryptoSignatureVerificationData(Base16.Decode(encodedCert)));
            });

            Assert.That(ex.ParamName == "signatureBytes", "Unexpected exception message: " + ex.Message);
        }

        [Test]
        public void NoTrustAnchorsTest()
        {
            string encodedSignedBytes = "3029020456C0D6A904210187EBC5594827DC2B3F87918DC7AFE8A528E844D65918CD525984D65981C2C79A";

            string encodedSignature =


            ICryptoSignatureVerifier verifier = KsiProvider.CreatePkcs7CryptoSignatureVerifier();
            ArgumentException ex = Assert.Throws<ArgumentException>(delegate
            {
                verifier.Verify(Base16.Decode(encodedSignedBytes), Base16.Decode(encodedSignature), null);
            });

            Assert.That(ex.Message.StartsWith("No trust anchors given."), "Unexpected exception message: " + ex.Message);
        }

        [Test]
        public void VerifyTest()
        {
            string encodedSignedBytes = "3029020456C0D6A904210187EBC5594827DC2B3F87918DC7AFE8A528E844D65918CD525984D65981C2C79A";
            // valid from 2016.01.01 - 2026.01.01
            string encodedCert =
                "308201A730820110A003020102021000BAA25764984826073CEF1BEEAA7B6F300D06092A864886F70D01010B050030123110300E06035504030C0774657374696E67301E170D3136303130313030303030305A170D3236303130313030303030305A30123110300E06035504030C0774657374696E6730819F300D06092A864886F70D010101050003818D0030818902818100E66DC137E4F856EADB0D47C280BED297D70191287919FD6EBF1195DF5E821EA867F861E551A37762E3CAEBB32B1DE7E0143529F1678A87BCE2C8E5D5185F25EEC3ABC7E295EEBC64EFE4BC8ADB412A99D3F9125D30C45F887632DE4B95AA169B79D1A6FD4E735255632341ED41B5BFA828975A4F1501B02C2277CA15BD470DAB0203010001300D06092A864886F70D01010B05000381810057B6B2BED11E7DC06E7A7AD77D1922C33FE8BDEBDC48B20A9444F807AA6017890E10B21C6FA5C4795AF32B9A45E9C560580115C8DF09E4ACA8E69C2757F9CAAB3007B548A567DBE8FB228EFF4F3D7995B3B2F008F3D62BECB3D2E80827A17B42B9C8C8C0280565868D572BBE7E4916E4888D8F503BEC1561CF4A1495C43C6420";

            string encodedSignature =


            ICryptoSignatureVerifier verifier = KsiProvider.CreatePkcs7CryptoSignatureVerifier();
            verifier.Verify(Base16.Decode(encodedSignedBytes),
                Base16.Decode(encodedSignature),
                new CryptoSignatureVerificationData(Base16.Decode(encodedCert)));
        }

        [Test]
        public void VerifyWithMultiSignerInfosTest()
        {
            string encodedSignedBytes = "3029020456C0D6A904210187EBC5594827DC2B3F87918DC7AFE8A528E844D65918CD525984D65981C2C79A";
            // valid from 2016.01.01 - 2026.01.01
            string encodedCert =


            string encodedSignature =


            ICryptoSignatureVerifier verifier = KsiProvider.CreatePkcs7CryptoSignatureVerifier();
            verifier.Verify(Base16.Decode(encodedSignedBytes),
                Base16.Decode(encodedSignature),
                new CryptoSignatureVerificationData(Base16.Decode(encodedCert)));
        }

        [Test]
        public void VerifyWithRandomSignatureBytesTest()
        {
            string encodedSignedBytes = "3029020456C0D6A904210187EBC5594827DC2B3F87918DC7AFE8A528E844D65918CD525984D65981C2C79A";
            // valid from 2016.01.01 - 2026.01.01
            string encodedCert =


            string encodedSignature = "0102030405";

            ICryptoSignatureVerifier verifier = KsiProvider.CreatePkcs7CryptoSignatureVerifier();
            PkiVerificationErrorException ex = Assert.Throws<PkiVerificationErrorException>(delegate
            {
                verifier.Verify(Base16.Decode(encodedSignedBytes),
                    Base16.Decode(encodedSignature),
                    new CryptoSignatureVerificationData(Base16.Decode(encodedCert)));
            });

            // separate error messages for Microsoft and Bouncy Castle
            Assert.That(ex.Message.StartsWith("Error when verifying PKCS#7 signature") || ex.Message.StartsWith("Cannot create signature from signatureBytes"),
                "Unexpected exception message: " + ex.Message);
        }

        [Test]
        public void VerifyWithRandomCertBytesTest()
        {
            string encodedSignedBytes = "3029020456C0D6A904210187EBC5594827DC2B3F87918DC7AFE8A528E844D65918CD525984D65981C2C79A";
            string encodedCert = "0102030405";

            string encodedSignature =


            ICryptoSignatureVerifier verifier = KsiProvider.CreatePkcs7CryptoSignatureVerifier();
            PkiVerificationErrorException ex = Assert.Throws<PkiVerificationErrorException>(delegate
            {
                verifier.Verify(Base16.Decode(encodedSignedBytes),
                    Base16.Decode(encodedSignature),
                    new CryptoSignatureVerificationData(Base16.Decode(encodedCert)));
            });

            Assert.That(ex.Message.StartsWith("Cannot create trust anchor certificate from CertificateBytes"), "Unexpected exception message: " + ex.Message);
        }

        [Test]
        public void VerifyWithTimeTest()
        {
            string encodedSignedBytes = "3029020456C0D6A904210187EBC5594827DC2B3F87918DC7AFE8A528E844D65918CD525984D65981C2C79A";
            // valid from 2016.01.01 - 2026.01.01
            string encodedCert =


            string encodedSignature =


            ICryptoSignatureVerifier verifier = KsiProvider.CreatePkcs7CryptoSignatureVerifier();
            verifier.Verify(Base16.Decode(encodedSignedBytes),
                Base16.Decode(encodedSignature),
                new CryptoSignatureVerificationData(Base16.Decode(encodedCert), Util.ConvertDateTimeToUnixTime(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Utc))));
        }

        [Test]
        public void VerifyWithTimeExpiredTest()
        {
            string encodedSignedBytes = "3029020456C0D6A904210187EBC5594827DC2B3F87918DC7AFE8A528E844D65918CD525984D65981C2C79A";
            // valid from 2016.01.01 - 2026.01.01
            string encodedCert =


            string encodedSignature =


            PkiVerificationFailedCertNotValidException ex = Assert.Throws<PkiVerificationFailedCertNotValidException>(delegate
            {
                ICryptoSignatureVerifier verifier = KsiProvider.CreatePkcs7CryptoSignatureVerifier();
                verifier.Verify(Base16.Decode(encodedSignedBytes),
                    Base16.Decode(encodedSignature),
                    // test with time 2015.12.31
                    new CryptoSignatureVerificationData(Base16.Decode(encodedCert), Util.ConvertDateTimeToUnixTime(new DateTime(2015, 12, 31))));
            });

            Assert.That(ex.Message.StartsWith("PKCS#7 signature certificate is not valid"), "Unexpected exception message: " + ex.Message);
            Assert.That(ex.InnerException.Message.StartsWith("Certificate not valid at"), "Unexpected exception message: " + ex.Message);
        }

        [Test]
        public void VerifyWithModifiedSignedBytesTest()
        {
            string encodedModifiedSignedBytes = "0029020456C0D6A904210187EBC5594827DC2B3F87918DC7AFE8A528E844D65918CD525984D65981C2C79A";
            // valid from 2016.01.01 - 2026.01.01
            string encodedCert =


            string encodedSignature =


            PkiVerificationFailedException ex = Assert.Throws<PkiVerificationFailedException>(delegate
            {
                ICryptoSignatureVerifier verifier = KsiProvider.CreatePkcs7CryptoSignatureVerifier();
                verifier.Verify(Base16.Decode(encodedModifiedSignedBytes),
                    Base16.Decode(encodedSignature),
                    new CryptoSignatureVerificationData(Base16.Decode(encodedCert)));
            });

            Assert.That(
                ex.Message.StartsWith("Failed to verify PKCS#7 signature")
                && (
                    // separate error messages for Microsoft and Bouncy Castle
                    ex.InnerException.Message.StartsWith("The hash value is not correct") ||
                    ex.InnerException.Message.StartsWith("message-digest attribute value does not match calculated value")
                    ),
                "Unexpected exception message: " + ex.Message);
        }

        [Test]
        public void VerifyWithInvalidCertTest()
        {
            string encodedSignedBytes = "3029020456C0D6A904210187EBC5594827DC2B3F87918DC7AFE8A528E844D65918CD525984D65981C2C79A";
            string encodedSignature =


            ICryptoSignatureVerifier verifier = KsiProvider.CreatePkcs7CryptoSignatureVerifier();

            PkiVerificationFailedException ex = Assert.Throws<PkiVerificationFailedException>(delegate
            {
                verifier.Verify(Base16.Decode(encodedSignedBytes),
                    Base16.Decode(encodedSignature),
                    new CryptoSignatureVerificationData(GetFileBytes(Resources.PkiTrustProvider_CustomCertInvalid)));
            });

            // separate error messages for Microsoft and Bouncy Castle
            Assert.That(ex.Message.StartsWith("Trust chain did not complete to the known authority anchor. Thumbprints did not match.") ||
                        (ex.Message.StartsWith("Could not build certificate path") &&
                         ex.InnerException.Message.StartsWith("Unable to find certificate chain.")),
                "Unexpected exception message: " + ex.Message);
        }

        [Test]
        public void VerifyWithPublicationsFileCertTest()
        {
            using (FileStream stream = new FileStream(Path.Combine(TestSetup.LocalPath, Resources.PkiTrustProvider_PubsFileCustomCert), FileMode.Open, FileAccess.Read))
            {
                PublicationsFile pubsFile = new PublicationsFileFactory(new TestPkiTrustProvider()).Create(stream) as PublicationsFile;
                ICryptoSignatureVerifier verifier = KsiProvider.CreatePkcs7CryptoSignatureVerifier();
                verifier.Verify(pubsFile.GetSignedBytes(), pubsFile.GetSignatureValue(), new CryptoSignatureVerificationData(GetFileBytes(Resources.PkiTrustProvider_CustomCert)));
            }
        }

        private byte[] GetFileBytes(string path)
        {
            return File.ReadAllBytes(Path.Combine(TestSetup.LocalPath, path));
        }
    }
}